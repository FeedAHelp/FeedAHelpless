// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  image         String?
  register      Register        @relation(fields: [registerId], references: [id])
  registerId    String          @unique
  contributions contributions[]
  wishs         Wishs[]
  likes         Likes[]
  shares        Shares[]
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  loginTime DateTime @default(now())
  userId    String
  user      Register @relation(fields: [userId], references: [id])
}

model Register {
  id          String         @id @default(uuid())
  email       String         @unique
  phone       String         @unique
  password    String
  role        String
  accessToken String
  verified    Boolean
  user        User?
  emailVerify EmailVerify[]
  logins      LoginHistory[]
}

model Newsletter {
  id        String   @id @default(uuid())
  userId    String?
  email     String   @unique
  createdAt DateTime @default(now())
}

model FahCounter {
  id                 String @id @default(uuid())
  sectionName        String
  sectionDescription String
  imageIconUrl       String
  imageAlt           String
  value              String
  monthlyIncrease    String
}

model Ingredients {
  id                 String               @id @default(uuid())
  name               String               @unique
  imageName          String
  subMenuIngredients subMenuIngredients[]
}

model EmailVerify {
  id       Int      @id @default(autoincrement())
  email    String
  code     Int
  expireAt DateTime
  createAt DateTime @default(now())
  register Register @relation(fields: [email], references: [email])
}

model contributions {
  id          String            @id @default(uuid())
  contributor String
  type        ContributionTypes
  dateTime    DateTime
  value       Float
  createdAt   DateTime          @default(now())
  user        User              @relation(fields: [contributor], references: [id])
}

enum ContributionTypes {
  financial
  volunteer
}

model menues {
  id        String      @id @default(uuid())
  name      String      @unique
  subMenues subMenues[]
}

model subMenues {
  id                 String               @id @default(uuid())
  menu               String
  name               String               @unique
  mainMenues         menues               @relation(fields: [menu], references: [name])
  menuWishLikes      menuWishLikes[]
  subMenuIngredients subMenuIngredients[]
}

model subMenuIngredients {
  id          String      @id @default(uuid())
  subMenu     String
  ingredient  String
  amount      Float
  subMenues   subMenues   @relation(fields: [subMenu], references: [name])
  ingredients Ingredients @relation(fields: [ingredient], references: [name])
}

model menuWishLikes {
  id        String    @id @default(uuid())
  menuId    String    @unique
  likes     Int
  wishs     Int
  shares    Int
  Wishs     Wishs[]
  Likes     Likes[]
  Shares    Shares[]
  subMenues subMenues @relation(fields: [menuId], references: [name])
}

model Wishs {
  id            String        @id @default(uuid())
  menuId        String
  wisher        String
  createdAt     DateTime      @default(now())
  menuWishLikes menuWishLikes @relation(fields: [menuId], references: [menuId])
  user          User          @relation(fields: [wisher], references: [id])
}

model Likes {
  id            String        @id @default(uuid())
  menuId        String
  liker         String
  createdAt     DateTime      @default(now())
  menuWishLikes menuWishLikes @relation(fields: [menuId], references: [menuId])
  user          User          @relation(fields: [liker], references: [id])
}

model Shares {
  id            String        @id @default(uuid())
  menuId        String
  sharer        String
  createdAt     DateTime      @default(now())
  menuWishLikes menuWishLikes @relation(fields: [menuId], references: [menuId])
  user          User          @relation(fields: [sharer], references: [id])
}
